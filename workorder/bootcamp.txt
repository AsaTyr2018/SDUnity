Alles klar, ich formuliere den Arbeitsauftrag jetzt so um, dass er *wirklich* agentensicher ist:
→ Kein Ballast, keine unnötigen Bedienelemente, aber mit vollständiger Stilbeschreibung, UI-Logik und Liste aller Daten, die angezeigt oder verarbeitet werden müssen.
Hier ist die finale Fassung:

---

## 🧾 Arbeitsauftrag: Frontend-Modul „Bootcamp“ für LoRA-Training (ohne Bildzugriff)

### 🧠 Ziel:

Entwicklung eines schrittweisen Web-Interfaces zur Vorbereitung von LoRA-Modellen. Das Frontend führt Benutzer (oder Agenten) durch Klassifizierung, Datenverwaltung und Trainingskonfiguration – ohne direkten Zugriff auf Bilddaten.
Der **Upload, das Tagging und das Training** basieren auf Metadaten und strukturierter Anzeige. **Bildinhalte selbst werden nicht angezeigt oder benötigt.**

---

## 🔧 Technische Anforderungen

### 📁 **1. Projektinitialisierung**

#### Daten, die angezeigt werden:

* **Auswahlfeld für LoRA-Typ**:

  * `Character`
  * `Style`
  * `Concept`
* **Pflichtfeld**: Projektname (Beispiel: `ClashRoyal_Archer`)

#### Stilvorgaben:

* Drei visuelle Karten, farblich oder grafisch unterscheidbar
* Auswahlstatus optisch hervorgehoben
* Weiter-Button aktiviert nur bei gültigem Namen

---

### ⬆️ **2. Daten-Upload (Metadatenbasiert)**

#### Darstellung:

* Eingabefeld zum Hochladen eines `.zip`-Archivs
* Anzeige: Anzahl erkannter Dateien
* Unterstützte Formate: `.png`, `.jpg`, `.jpeg`, `.webp` (bis 50 MB pro Datei, max. 1000 Dateien)
* ZIP wird serverseitig entpackt und intern weiterverarbeitet

#### Wichtig:

* **Keine Bildanzeige** nötig oder erlaubt
* Nutzerinteraktion erfolgt über Dateizähler und Uploadstatus

---

### 🏷 **3. Tagging-Übersicht (Metadatenanzeige)**

#### Ansicht:

* Eine Grid-Darstellung, die **pro Bild-Eintrag** folgendes zeigt:

  * Interaktives **Tag-Feld** (Textfeld mit Tag-Chips)
  * Seitenweise Navigation durch die Bild-Metadaten
* Jedes Bild erhält eine ID oder Dateinamen-Ersatz als Platzhalter

#### Zusatzfunktion – **Tag Viewer**:

* Erweitertes Panel (ausklappbar)
* Zeigt **alle im Dataset vorhandenen Tags** mit Häufigkeit
* **Aktionen für Bulk-Änderung**:

  * `Remove Tag`
  * `Replace Tag`

---

### ⚙️ **4. Auto-Tagging Konfiguration**

#### Konfigurierbare Optionen:

* `Max Tags`: Zahl
* `Min Threshold`: Zahl (0–1)
* `Blacklist`: Kommagetrennte Tags
* `Prepend Tags`: Pflichtfeld (steht immer an erster Stelle)
* `Append Tags`: Optional

#### Verhalten:

* Auto-Tags werden durch den Server erzeugt (z. B. WD14-artig)
* Ergebnisformat:
  `[prepend-tag], [auto-tags], [append-tags]`
* Tags werden als editierbare Chips pro Bild dargestellt

---

### 📊 **5. Trainingsübersicht & Setup**

#### Modell- und Projektdetails:

* Tabelle zeigt:

  * Name
  * Typ
  * Anzahl Bilder
  * Anzahl Labels
  * Label-Typ (immer `Tag`)

#### Modell-Auswahl (Pflichtfeld):

* Verfügbare Optionen:

  * `SD 1.5`
  * `SDXL`
  * `Pony`

#### Trainingsparameter:

* **Automatisch voreingestellt** durch internen Algorithmus (Besten weg recherchieren)

  * Basierend auf Modelltyp und Datensatzgröße
* Anzeige der Parameter in strukturierter Form:

  * Epochs, Batch Size, Steps, Resolution, LRs, Schedulers, etc.
  * Optional sichtbar: Optimizer-Einstellungen, LoRA Type, Noise Offset, etc.
* Nutzer kann Parameter ansehen, aber muss nicht manuell eingreifen

---

### 🖼️ **6. Sample Prompt Definition (optional)**

#### Darstellung:

* Drei Felder (`Image #1`, `Image #2`, `Image #3`)
* Standard: "Automatically set"
* Benutzer kann individuelle Prompts eingeben (optional)

---

### ▶️ **7. Start des Trainings**

* Sobald alle Pflichtfelder gesetzt sind, wird Training durch Klick gestartet
* Laufender Trainings Job wird in einer Übersicht unter 'Bootcamp' angezeigt. Prozess angabe in Epoch die durchlaufen sind.

---

## 🧩 UI-Stilbeschreibung

* **Dunkles Design** mit klarer Kontrastführung (Dark Mode bevorzugt)
* Verwendung moderner UI-Bibliothek (z. B. React + Tailwind, ShadCN oder vergleichbar)
* Visuelle Orientierung durch:

  * Fortschrittsbalken oder Schrittzähler
  * Seitenweise Navigation (`Next`, `Back`)
  * Visuelle Trennung zwischen Dateneingabe und Auto-Generierung
* Kein Bildinhalt erforderlich – **alles auf Tag-Ebene und Metadatenbasis**

---

## ✅ Zusammenfassung: Was muss gelistet oder angezeigt werden

| Bereich             | Inhalte                                                          |
| ------------------- | ---------------------------------------------------------------- |
| **Start**           | LoRA-Typ (Character, Style, Concept), Name                       |
| **Upload**          | Anzahl Dateien im ZIP, unterstützte Formate                      |
| **Tagging**         | Tag-Feld pro Bild (kein Bild), Tag-Viewer (alle Tags + Aktionen) |
| **Auto-Tagging**    | Prepend, Append, Blacklist, Max Tags, Threshold                  |
| **Review**          | Name, Typ, Label-Anzahl, Modellwahl (nur SD1.5 / SDXL)           |
| **Training Params** | Alle Trainingsparameter (vorgeschlagen)                          |
| **Prompts**         | 3 optionale Prompt-Felder                                        |
| **Final Step**      | Start-Trigger für Training                                       |

---

Wenn du willst, exportier ich dir das auch als `.md`, `.txt` oder `.json` für Agenten-Loader. Sag einfach Bescheid 👩‍💻
